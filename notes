here's the project in so many words: a point and click.

first the scene situation, with a navigation system through interconnected nodes (s_node structures)
then displaying them through descriptions, and checking all memory leaks issues
then actually traveling it in the terminal
adding go_backs
adding a user_structure and action_objects in the s_nodes to be able to "unlock" added features of a scene or choices (maybe a char*tab* ? to be able to find more easily, using a placement int within the scene structure) => int tab, actually, because numbers are easier to allocate and also to keep track of !
makefile added for easier compilation

all done !

then expanding it into a fleshed out story_map, can't wait =)

alright, everything above works as needed:
we can now use objects within the inventory to unlock new possibilities, flow moves freely past the obstacle once removed the one time (okayed using a -1 instead of a zero for unlocked vs never locked in the first place)



will come back to this to expand on the world building we want to see

i maybe want this to be prophecy related, just exploration or character interaction included ? we'll see
maybe more some zelda kind of movement, right ? open world-ish concept, need some item to open a new zone, recreate a simple map

maybe add checkpoints ? Like for bigger zones we could add pointers to a checkpoint within the zone, so it's easier to navigate. I'm gonna try it with the small version so I can get back to the spawn point, see how it works.

go back glitches fsr -no ??? ig
also give a rulebook of some kind so people know what to do: "help" command
rulebook added, in help.c

alright, let's talk fight mechanics.
i want to add a character component to scene_nodes. These characters/creatures will have their own structures, which we can use for basic dialogue, damage and hp tracking. we also might want to add an "equipped_att" and "equipped_def" component in the user_node so we can have an object equipped as you fight. That equipped object can shield you from damage (see: def), or deal some more (see: att). Fight will always be an option when a character/creature is present - in fact, we might add it directly to the game_read choice structure so it can free up the other choices for peaceful or flipped options.

alright, so:

a) c_nodes allocated in s_nodes with components: name, weak points, dialogue one-liners, attack schematics/mechanics, maybe death taglines ? (char/cre death, user death), and weapon/shield (just one for now)
b) if char/cre present in the room, game_read immediate "fight" send to a fight_read(head->charcre, user) and "talk" send to a dialogue_read(head->charcre, user) (with backup fight option at any time);


!!!(still needs tests for the modifiers and how to use them when equipped: now working on this aspect, update: it works)
c) user tab component of a weapon/shield structure from the inventory, as in every object will have multiple components: a placement(within the struct tab), a name, an attack (pos) or defence (neg) boost (or 0 for neither), and a have_it (1 for yes, 0 for no)
=> this will also make !!!inventory access significantly easier
=> do I even need a !!have_it ? If I just copy the object from the room/char_cre into my inventory, then if it's in there I have it, right ? might also need to change my !!!locked room mechanic to accomodate
d) 

//for safekeeping
typedef struct  charcre_node
{
  char  *name;
  char  *desc;
  char  **strikes;
  char  *c_death;
  char  *u_death;
  o_node	*obj;
  int att;
  int def;
  int	i;
  int	hp;
}               c_node;
